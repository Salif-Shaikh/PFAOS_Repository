A)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    pid_t pid;

    pid = fork();

    if (pid < 0) {
        perror("Fork failed.");
        exit(1);
    } else if (pid == 0) {
        // Child process

        // Perform some work in the child process
        // ...

        // Exit with a status code
        int status = 123;
        exit(status);
    } else {
        // Parent process

        // Wait for the child process to complete
        int childStatus;
        wait(&childStatus);

        if (WIFEXITED(childStatus)) {
            // Child process exited normally
            int exitStatus = WEXITSTATUS(childStatus);
            printf("Child process exited with status: %d\n", exitStatus);
        } else if (WIFSIGNALED(childStatus)) {
            // Child process terminated by a signal
            int signalNumber = WTERMSIG(childStatus);
            printf("Child process terminated by signal: %d\n", signalNumber);
        }
    }

    return 0;
}
B)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <string.h>

int main() {
    const char* sourceDirectory = "."; // Replace with the actual source directory path
    const char* backupDirectory = "backup";

    // Create the backup directory
    if (mkdir(backupDirectory, 0777) != 0) {
        perror("Error creating backup directory");
        exit(1);
    }

    DIR* dir;
    struct dirent* entry;

    dir = opendir(sourceDirectory);

    if (dir == NULL) {
        perror("Error opening source directory");
        exit(1);
    }

    while ((entry = readdir(dir)) != NULL) {
        if (entry->d_type == DT_REG) {
            // Regular file

            pid_t pid = fork();

            if (pid < 0) {
                perror("Fork failed");
                exit(1);
            } else if (pid == 0) {
                // Child process

                char sourcePath[1000];
                char destPath[1000];

                snprintf(sourcePath, sizeof(sourcePath), "%s/%s", sourceDirectory, entry->d_name);
                snprintf(destPath, sizeof(destPath), "%s/%s/%s", sourceDirectory, backupDirectory, entry->d_name);

                // Execute "cp" command to copy the file
                execlp("cp", "cp", sourcePath, destPath, NULL);

                // exec failed if reached here
                perror("Error executing cp command");
                exit(1);
            }
        }
    }

    closedir(dir);

    // Wait for all child processes to complete
    int status;
    pid_t childPid;

    while ((childPid = wait(&status)) > 0) {
        if (WIFEXITED(status)) {
            printf("Child process %d exited normally.\n", childPid);
        } else if (WIFSIGNALED(status)) {
            printf("Child process %d terminated by signal.\n", childPid);
        }
    }

    return 0;
}
______________________________________________________________________________________________
Mobile Technologies
_________________________________________________________________________________________________
A) below code in java main file
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    private EditText number1EditText, number2EditText;
    private Button submitButton;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        number1EditText = findViewById(R.id.number1EditText);
        number2EditText = findViewById(R.id.number2EditText);
        submitButton = findViewById(R.id.submitButton);

        submitButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                int number1 = Integer.parseInt(number1EditText.getText().toString());
                int number2 = Integer.parseInt(number2EditText.getText().toString());

                if (number1 > 10 && number2 > 10) {
                    Toast.makeText(MainActivity.this, "Both numbers must be less than or equal to 10", Toast.LENGTH_SHORT).show();
                    number1EditText.setText("");
                    number2EditText.setText("");
                } else {
                    Toast.makeText(MainActivity.this, "Number 1: " + number1 + "\nNumber 2: " + number2, Toast.LENGTH_SHORT).show();
                }
            }
        });
    }
}

B)
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    private EditText number1EditText, number2EditText;
    private Button addButton, subtractButton, multiplyButton, divideButton;
    private TextView resultTextView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        number1EditText = findViewById(R.id.number1EditText);
        number2EditText = findViewById(R.id.number2EditText);
        addButton = findViewById(R.id.addButton);
        subtractButton = findViewById(R.id.subtractButton);
        multiplyButton = findViewById(R.id.multiplyButton);
        divideButton = findViewById(R.id.divideButton);
        resultTextView = findViewById(R.id.resultTextView);

        addButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                performOperation("+");
            }
        });

        subtractButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                performOperation("-");
            }
        });

        multiplyButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                performOperation("*");
            }
        });

        divideButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                performOperation("/");
            }
        });
    }

    private void performOperation(String operator) {
        String number1Str = number1EditText.getText().toString();
        String number2Str = number2EditText.getText().toString();

        if (number1Str.isEmpty() || number2Str.isEmpty()) {
            Toast.makeText(MainActivity.this, "Please enter both numbers", Toast.LENGTH_SHORT).show();
            return;
        }

        double number1 = Double.parseDouble(number1Str);
        double number2 = Double.parseDouble(number2Str);
        double result = 0;

        switch (operator) {
            case "+":
                result = number1 + number2;
                break;
            case "-":
                result = number1 - number2;
                break;
            case "*":
                result = number1 * number2;
                break;
            case "/":
                if (number2 == 0) {
                    Toast.makeText(MainActivity.this, "Cannot divide by zero", Toast.LENGTH_SHORT).show();
                    return;
                }
                result = number1 / number2;
                break;
        }

        resultTextView.setText(String.valueOf(result));
    }
}

