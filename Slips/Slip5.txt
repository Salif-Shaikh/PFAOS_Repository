A)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    int pipefd[2];
    pid_t childPid;
    char message[3][20] = {
        "Hello World",
        "Hello SPPU",
        "Linux is Funny"
    };

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(1);
    }

    // Fork a child process
    childPid = fork();

    if (childPid == -1) {
        perror("fork");
        exit(1);
    } else if (childPid == 0) {
        // Child process

        // Close the read end of the pipe
        close(pipefd[0]);

        // Write the messages to the pipe
        for (int i = 0; i < 3; i++) {
            write(pipefd[1], message[i], sizeof(message[i]));
        }

        // Close the write end of the pipe
        close(pipefd[1]);

        exit(0);
    } else {
        // Parent process

        // Close the write end of the pipe
        close(pipefd[1]);

        // Read and display the messages from the pipe
        char receivedMessage[20];
        int bytesRead;

        while ((bytesRead = read(pipefd[0], receivedMessage, sizeof(receivedMessage))) > 0) {
            printf("Received message: %s\n", receivedMessage);
        }

        // Close the read end of the pipe
        close(pipefd[0]);

        // Wait for the child process to finish
        wait(NULL);
    }

    return 0;
}
B)
Sure! Here's a C program that reads all ".txt" files in the current directory, merges them into one text file, and returns a file descriptor for the new file:

```c
#include <stdio.h>
#include <dirent.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>

#define MAX_FILENAME_LENGTH 256
#define BUFFER_SIZE 1024

int mergeTxtFiles(const char* outputFilename) {
    DIR* directory;
    struct dirent* entry;
    char filename[MAX_FILENAME_LENGTH];
    char buffer[BUFFER_SIZE];
    int outputFd;

    // Open the directory
    directory = opendir(".");
    if (directory == NULL) {
        perror("opendir");
        return -1;
    }

    // Open the output file for writing
    outputFd = open(outputFilename, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (outputFd == -1) {
        perror("open");
        closedir(directory);
        return -1;
    }

    // Traverse the directory and merge txt files
    while ((entry = readdir(directory)) != NULL) {
        if (entry->d_type == DT_REG && strstr(entry->d_name, ".txt") != NULL) {
            // Found a txt file, open and read it
            snprintf(filename, sizeof(filename), "%s", entry->d_name);
            int inputFd = open(filename, O_RDONLY);
            if (inputFd == -1) {
                perror("open");
                closedir(directory);
                close(outputFd);
                return -1;
            }

            // Read from the input file and write to the output file
            ssize_t bytesRead;
            while ((bytesRead = read(inputFd, buffer, sizeof(buffer))) > 0) {
                ssize_t bytesWritten = write(outputFd, buffer, bytesRead);
                if (bytesWritten != bytesRead) {
                    perror("write");
                    closedir(directory);
                    close(inputFd);
                    close(outputFd);
                    return -1;
                }
            }

            // Close the input file
            close(inputFd);
        }
    }

    // Close the output file and the directory
    close(outputFd);
    closedir(directory);

    // Return the file descriptor for the new file
    return open(outputFilename, O_RDONLY);
}

int main() {
    const char* outputFilename = "merged.txt";
    int newFileDescriptor;

    newFileDescriptor = mergeTxtFiles(outputFilename);

    if (newFileDescriptor == -1) {
        printf("Failed to merge txt files.\n");
    } else {
        printf("Txt files merged successfully. New file descriptor: %d\n", newFileDescriptor);
    }

    return 0;
}
```

In this program, we define the `mergeTxtFiles()` function that takes the output filename as an argument. It opens the current directory using `opendir()` and iterates over each entry. For each regular file with a ".txt" extension, it opens the file, reads its content, and writes it to the output file.

The program uses the `open()` system call to create and open the output file for writing. It then reads from each input file and writes the content to the output file using the `read()` and `write()` system calls.

After merging all the text files, the function returns the file descriptor of the newly created file.

In the `main()` function, we call `mergeTxtFiles()` to merge the text files in the current directory. If successful, it prints the new file descriptor. Otherwise, it displays a failure message.

Note: Make sure to compile and run this program in the directory where the text files are located. Also, if the output file already exists, it will be