A)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>

void handle_alarm(int signum) {
    printf("Alarm is fired!\n");
}

int main() {
    pid_t pid;

    // Fork a child process
    pid = fork();

    if (pid == -1) {
        perror("fork");
        exit(1);
    } else if (pid == 0) {
        // Child process
        sleep(5); // Wait for 5 seconds
        kill(getppid(), SIGALRM); // Send SIGALRM signal to parent process
    } else {
        // Parent process
        signal(SIGALRM, handle_alarm); // Register signal handler for SIGALRM

        while (1) {
            // Do other tasks in the parent process
            sleep(1);
        }
    }

    return 0;
}
B)
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <sys/stat.h>
#include <string.h>

void list_files(const char *path, int min_size) {
    DIR *dir;
    struct dirent *entry;
    struct stat file_stat;

    // Open the directory
    dir = opendir(path);
    if (dir == NULL) {
        perror("opendir");
        return;
    }

    // Iterate over the directory entries
    while ((entry = readdir(dir)) != NULL) {
        char file_path[1024];

        // Ignore current directory and parent directory entries
        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) {
            continue;
        }

        // Construct the full path of the file
        snprintf(file_path, sizeof(file_path), "%s/%s", path, entry->d_name);

        // Get the file information
        if (stat(file_path, &file_stat) == -1) {
            perror("stat");
            continue;
        }

        // Check if it's a regular file and its size is greater than 'n' bytes
        if (S_ISREG(file_stat.st_mode) && file_stat.st_size > min_size) {
            printf("%s\n", file_path);
        }

        // Recursively process subdirectories
        if (S_ISDIR(file_stat.st_mode)) {
            list_files(file_path, min_size);
        }
    }

    closedir(dir);
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <min_size>\n", argv[0]);
        return 1;
    }

    int min_size = atoi(argv[1]);

    // Get the current directory
    char current_dir[1024];
    if (getcwd(current_dir, sizeof(current_dir)) == NULL) {
        perror("getcwd");
        return 1;
    }

    printf("Files larger than %d bytes:\n", min_size);
    list_files(current_dir, min_size);

    return 0;
}
