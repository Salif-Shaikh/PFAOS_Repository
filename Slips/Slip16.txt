A)
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>

int sigintCount = 0;

void sigintHandler(int signum);

int main() {
    signal(SIGINT, sigintHandler);
    
    while (1) {
        // Infinite loop to keep the program running
    }
    
    return 0;
}

void sigintHandler(int signum) {
    if (sigintCount == 0) {
        printf("Ctrl-C signal received. Press Ctrl-C again to exit.\n");
        sigintCount++;
    } else {
        printf("Exiting the program.\n");
        exit(0);
    }
}
B)
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int fd;
    pid_t pid;
    
    pid = fork();
    
    if (pid < 0) {
        perror("Fork failed.");
        exit(1);
    } else if (pid == 0) {
        // Child process
        
        // Open output.txt in write-only mode
        fd = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);
        if (fd < 0) {
            perror("Error opening file.");
            exit(1);
        }
        
        // Redirect stdout to the file
        dup2(fd, STDOUT_FILENO);
        
        // Close the file descriptor
        close(fd);
        
        // Execute ls -l command
        execlp("ls", "ls", "-l", NULL);
        
        // exec failed if reached here
        perror("Error executing command.");
        exit(1);
    } else {
        // Parent process
        
        // Wait for the child process to complete
        wait(NULL);
        
        printf("Command executed successfully.\n");
    }
    
    return 0;
}
