A)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#define BUFFER_SIZE 1024

int main() {
    int pipe_fds[2];
    char buffer[BUFFER_SIZE];

    // Create the pipe
    if (pipe(pipe_fds) == -1) {
        perror("pipe");
        return 1;
    }

    // Messages to write to the pipe
    char *messages[3] = {
        "Hello World",
        "Hello SPPU",
        "Linux is Funny"
    };

    // Write the messages to the pipe
    for (int i = 0; i < 3; i++) {
        write(pipe_fds[1], messages[i], strlen(messages[i]));
    }

    // Read and display the messages from the pipe
    printf("Messages received from the pipe:\n");
    while (read(pipe_fds[0], buffer, BUFFER_SIZE) > 0) {
        printf("%s\n", buffer);
    }

    // Close the pipe file descriptors
    close(pipe_fds[0]);
    close(pipe_fds[1]);

    return 0;
}
B)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define MAX_COMMAND_LENGTH 100
#define MAX_ARGS 3

void executeCommand(char* command);
void searchFirstOccurrence(char* pattern, char* filename);
void countOccurrences(char* pattern, char* filename);
void searchAllOccurrences(char* pattern, char* filename);

int main() {
    char command[MAX_COMMAND_LENGTH];
    
    while (1) {
        printf("NewShell$ ");
        fgets(command, sizeof(command), stdin);
        
        // Remove trailing newline character
        if (command[strlen(command) - 1] == '\n') {
            command[strlen(command) - 1] = '\0';
        }
        
        executeCommand(command);
    }
    
    return 0;
}

void executeCommand(char* command) {
    char* args[MAX_ARGS];
    int i = 0;
    
    args[i] = strtok(command, " ");
    
    while (args[i] != NULL && i < MAX_ARGS - 1) {
        i++;
        args[i] = strtok(NULL, " ");
    }
    
    if (args[0] == NULL) {
        // Empty command
        return;
    }
    
    if (strcmp(args[0], "search") == 0) {
        if (args[1] != NULL && args[2] != NULL) {
            if (strcmp(args[1], "f") == 0) {
                searchFirstOccurrence(args[2], args[3]);
            } else if (strcmp(args[1], "c") == 0) {
                countOccurrences(args[2], args[3]);
            } else if (strcmp(args[1], "a") == 0) {
                searchAllOccurrences(args[2], args[3]);
            } else {
                printf("Invalid search command.\n");
            }
        } else {
            printf("Invalid arguments for search command.\n");
        }
    } else {
        pid_t pid = fork();
        
        if (pid < 0) {
            fprintf(stderr, "Fork failed.\n");
        } else if (pid == 0) {
            // Child process
            execvp(args[0], args);
            printf("Command not found.\n");
            exit(0);
        } else {
            // Parent process
            wait(NULL);
        }
    }
}

void searchFirstOccurrence(char* pattern, char* filename) {
    FILE* file = fopen(filename, "r");
    if (file == NULL) {
        printf("File not found.\n");
        return;
    }
    
    char line[MAX_COMMAND_LENGTH];
    int lineNum = 1;
    
    while (fgets(line, sizeof(line), file)) {
        if (strstr(line, pattern) != NULL) {
            printf("Pattern found at line %d: %s", lineNum, line);
            fclose(file);
            return;
        }
        
        lineNum++;
    }
    
    printf("Pattern not found in the file.\n");
    fclose(file);
}

void countOccurrences(char* pattern, char* filename) {
    FILE* file = fopen(filename, "r");
    if (file == NULL) {
        printf("File not found.\n");
        return;
    }
    
    char line[MAX_COMMAND_LENGTH];
    int count = 0;
    
    while (fgets(line, sizeof(line), file)) {
        char* match = strstr(line, pattern);
        while (match != NULL) {
            count++;
            match = strstr(match + 1,
