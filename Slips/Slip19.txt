A)
#include <stdio.h>
#include <stdlib.h>

int main() {
    const char* sourceFile = "file1.txt"; // Replace with the actual source file name
    const char* destinationFile = "file2.txt"; // Replace with the actual destination file name
    
    // Move the contents of sourceFile to destinationFile
    if (rename(sourceFile, destinationFile) != 0) {
        perror("Error moving file");
        exit(1);
    }
    
    // Remove the sourceFile from the directory
    if (remove(sourceFile) != 0) {
        perror("Error removing file");
        exit(1);
    }
    
    printf("File moved and removed successfully.\n");
    
    return 0;
}
B)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>

void childSignalHandler(int signum) {
    if (signum == SIGCHLD) {
        printf("Child process has terminated.\n");
    }
}

void alarmSignalHandler(int signum) {
    if (signum == SIGALRM) {
        printf("Child process took too long. Killing it.\n");
        exit(0);
    }
}

int main() {
    pid_t pid;

    // Set signal handlers
    signal(SIGCHLD, childSignalHandler);
    signal(SIGALRM, alarmSignalHandler);

    pid = fork();

    if (pid < 0) {
        perror("Fork failed.");
        exit(1);
    } else if (pid == 0) {
        // Child process

        // Execute the desired command or program
        // Replace "command" with the actual command or program to be executed
        execlp("command", "command", NULL);

        // exec failed if reached here
        perror("Error executing command.");
        exit(1);
    } else {
        // Parent process

        // Set alarm for 5 seconds
        alarm(5);

        // Wait for the child process to complete
        int status;
        wait(&status);

        // Reset the alarm
        alarm(0);

        if (WIFEXITED(status)) {
            printf("Child process exited normally.\n");
        } else if (WIFSIGNALED(status)) {
            printf("Child process terminated by signal.\n");
        }
    }

    return 0;
}
