A)
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int fd;

    // Open the file (create if it doesn't exist)
    fd = open("file_with_hole.txt", O_WRONLY | O_CREAT, 0644);
    if (fd == -1) {
        perror("open");
        return 1;
    }

    // Write data to the beginning of the file
    char data[] = "This is some data";
    ssize_t bytes_written = write(fd, data, sizeof(data) - 1);
    if (bytes_written == -1) {
        perror("write");
        close(fd);
        return 1;
    }

    // Seek to the offset where the hole should be
    off_t offset = 1024 * 1024;  // 1 MB
    if (lseek(fd, offset, SEEK_SET) == -1) {
        perror("lseek");
        close(fd);
        return 1;
    }

    // Write data to create the hole (no actual bytes will be written)
    bytes_written = write(fd, "", 1);
    if (bytes_written == -1) {
        perror("write");
        close(fd);
        return 1;
    }

    // Close the file
    if (close(fd) == -1) {
        perror("close");
        return 1;
    }

    printf("File with a hole created successfully.\n");

    return 0;
}
B)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/stat.h>
#include <pwd.h>
#include <grp.h>
#include <time.h>

void display_file_info(const char *filename) {
    struct stat file_stat;

    // Retrieve file information
    if (stat(filename, &file_stat) == -1) {
        perror("stat");
        return;
    }

    // File type
    printf("File Type: ");
    if (S_ISREG(file_stat.st_mode))
        printf("Regular File\n");
    else if (S_ISDIR(file_stat.st_mode))
        printf("Directory\n");
    else if (S_ISLNK(file_stat.st_mode))
        printf("Symbolic Link\n");
    else if (S_ISFIFO(file_stat.st_mode))
        printf("FIFO/Named Pipe\n");
    else if (S_ISBLK(file_stat.st_mode))
        printf("Block Special File\n");
    else if (S_ISCHR(file_stat.st_mode))
        printf("Character Special File\n");
    else if (S_ISSOCK(file_stat.st_mode))
        printf("Socket\n");
    else
        printf("Unknown\n");

    // File Permissions
    printf("File Permissions: ");
    printf((file_stat.st_mode & S_IRUSR) ? "r" : "-");
    printf((file_stat.st_mode & S_IWUSR) ? "w" : "-");
    printf((file_stat.st_mode & S_IXUSR) ? "x" : "-");
    printf((file_stat.st_mode & S_IRGRP) ? "r" : "-");
    printf((file_stat.st_mode & S_IWGRP) ? "w" : "-");
    printf((file_stat.st_mode & S_IXGRP) ? "x" : "-");
    printf((file_stat.st_mode & S_IROTH) ? "r" : "-");
    printf((file_stat.st_mode & S_IWOTH) ? "w" : "-");
    printf((file_stat.st_mode & S_IXOTH) ? "x" : "-");
    printf("\n");

    // Number of Hard Links
    printf("Number of Hard Links: %ld\n", (long) file_stat.st_nlink);

    // User ID and Group ID
    struct passwd *user_info = getpwuid(file_stat.st_uid);
    struct group *group_info = getgrgid(file_stat.st_gid);
    printf("User ID: %d (%s)\n", file_stat.st_uid, user_info->pw_name);
    printf("Group ID: %d (%s)\n", file_stat.st_gid, group_info->gr_name);

    // File Size
    printf("File Size: %ld bytes\n", (long) file_stat.st_size);

    // File Access and Modification Time
    char access_time[20];
    char mod_time[20];
    strftime(access_time, sizeof(access_time), "%Y-%m-%d %H:%M:%S", localtime(&(file_stat.st_atime)));
    strftime(mod_time, sizeof(mod_time), "%Y-%m-%d %H:%M:%S", localtime(&(file_stat.st_mtime)));
    printf("Last Access Time: %s\n", access_time);
    printf("Last Modification Time: %s\n", mod_time);
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <filename>\n", argv[0]);
        return 1;
   
    // Display file information
    display_file_info(argv[1]);

    return 0;
}
