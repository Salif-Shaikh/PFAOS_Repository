A)
#include <stdio.h>
#include <sys/stat.h>

void identifyFileType(const char* filename);

int main() {
    const char* filename = "path_to_file"; // Replace with the actual file path
    
    identifyFileType(filename);
    
    return 0;
}

void identifyFileType(const char* filename) {
    struct stat fileStat;
    
    if (stat(filename, &fileStat) == -1) {
        perror("Error");
        return;
    }
    
    if (S_ISREG(fileStat.st_mode)) {
        printf("%s: Regular file\n", filename);
    } else if (S_ISDIR(fileStat.st_mode)) {
        printf("%s: Directory\n", filename);
    } else if (S_ISCHR(fileStat.st_mode)) {
        printf("%s: Character device\n", filename);
    } else if (S_ISBLK(fileStat.st_mode)) {
        printf("%s: Block device\n", filename);
    } else if (S_ISFIFO(fileStat.st_mode)) {
        printf("%s: FIFO or pipe\n", filename);
    } else if (S_ISLNK(fileStat.st_mode)) {
        printf("%s: Symbolic link\n", filename);
    } else if (S_ISSOCK(fileStat.st_mode)) {
        printf("%s: Socket\n", filename);
    } else {
        printf("%s: Unknown file type\n", filename);
    }
}
B)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>

int childPID;

void sighupHandler(int signum);
void sigintHandler(int signum);
void sigquitHandler(int signum);

int main() {
    childPID = fork();

    if (childPID < 0) {
        perror("Fork failed.");
        exit(1);
    } else if (childPID == 0) {
        // Child process
        signal(SIGHUP, sighupHandler);
        signal(SIGINT, sigintHandler);
        signal(SIGQUIT, sigquitHandler);

        while (1) {
            sleep(1); // Child process continues running
        }
    } else {
        // Parent process
        sleep(3);
        kill(childPID, SIGHUP);

        sleep(3);
        kill(childPID, SIGINT);

        sleep(9);
        kill(childPID, SIGQUIT);

        // Wait for child process to terminate
        int status;
        wait(&status);
    }

    return 0;
}

void sighupHandler(int signum) {
    printf("Child received SIGHUP signal.\n");
}

void sigintHandler(int signum) {
    printf("Child received SIGINT signal.\n");
}

void sigquitHandler(int signum) {
    printf("My Papa has Killed me!!!\n");
    exit(0);
}
